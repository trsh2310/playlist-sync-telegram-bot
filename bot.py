import asyncio
import logging
import sys

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from auto.spotify_manager import SpotifySync
from config import TELEGRAM_TOKEN
from auto.vk_manager import VKSync
import vk_api
import spotipy

from models import Database

yandex_names = ['yandex', 'Yandex', 'YANDEX',
                'yandex music', 'yandex.music', 'Yandex music', 'Yandex Music', 'Yandex.Music',
                'ัะฝะดะตะบั', 'ะฏะฝะดะตะบั', 'ะฏะะะะะก',
                'ัะฝะดะตะบั ะผัะทัะบะฐ', 'ะฏะฝะดะตะบั ะผัะทัะบะฐ', 'ะฏะฝะดะตะบั ะัะทัะบะฐ', 'ะฏะฝะดะตะบั.ะัะทัะบะฐ', 'ะฏ.ะัะทัะบะฐ']
vk_names = ['vk', 'Vk', 'VK',
            'vkontakte', 'v kontakte', 'Vkontakte', 'V kontakte', 'VKontakte', 'V Kontakte', 'VKONTAKTE', 'V KONTAKTE',
            'vk music', 'Vk music', 'Vk Music', 'VK music', 'VK Music', 'VK MUSIC',
            'vk ะผัะทัะบะฐ', 'Vk ะผัะทัะบะฐ', 'Vk ะัะทัะบะฐ', 'VK ะผัะทัะบะฐ', 'VK ะัะทัะบะฐ', 'VK ะะฃะะซะะ',
            'ะผัะทัะบะฐ vk', 'ะผัะทัะบะฐ Vk', 'ะัะทัะบะฐ Vk', 'ะผัะทัะบะฐ VK', 'ะัะทัะบะฐ VK', 'ะะฃะะซะะ VK',
            'ะฒะบ', 'ะะบ', 'ะะ',
            'ะฒะบะพะฝัะฐะบัะต', 'ะฒ ะบะพะฝัะฐะบัะต', 'ะะบะพะฝัะฐะบัะต', 'ะ ะบะพะฝัะฐะบัะต', 'ะะะพะฝัะฐะบัะต', 'ะ ะะพะฝัะฐะบัะต', 'ะะะะะขะะะขะ', 'ะ ะะะะขะะะขะ',
            'ะฒะบ ะผัะทัะบะฐ', 'ะะบ ะผัะทัะบะฐ', 'ะะบ ะัะทัะบะฐ', 'ะะ ะผัะทัะบะฐ', 'ะะ ะัะทัะบะฐ', 'ะะ ะะฃะะซะะ',
            'ะผัะทัะบะฐ ะฒะบ', 'ะผัะทัะบะฐ ะะบ', 'ะัะทัะบะฐ ะะบ', 'ะผัะทัะบะฐ ะะ', 'ะัะทัะบะฐ ะะ', 'ะะฃะะซะะ ะะ']
spotify_names = ['spotify', 'Spotify', 'SPOTIFY',
                'ัะฟะพัะธัะฐะน', 'ะกะฟะพัะธัะฐะน', 'ะกะะะขะะคะะ',
                'ัะฟะพัะธะบ', 'ะกะฟะพัะธะบ', 'ะกะะะขะะ']
zvooq_names = ['zvooq', 'Zvooq', 'ZVOOQ',
               'zvook', 'Zvook', 'ZVOOK',
               'ะทะฒัะบ', 'ะะฒัะบ', 'ะะะฃะ']

add_acc_mess = ["ะะพะฑะฐะฒะธัั ะฐะบะบะฐัะฝั", "ะะพะฑะฐะฒะธัั ะตัะต ะฐะบะบะฐัะฝั",
                "ะดะพะฑะฐะฒะธัั ะฐะบะบะฐัะฝั", "ะดะพะฑะฐะฒะธัั ะตัะต ะฐะบะบะฐัะฝั"]

TOKEN = TELEGRAM_TOKEN
dp = Dispatcher()
db = Database()
vk_sync = VKSync()
spotify_sync = SpotifySync(db)

class ChoosePlaylist(StatesGroup):
    choosing_platform = State()
    choosing_playlist = State()

#ะพะฑัะฐะฑะพัะบะฐ ะบะพะผะฐะฝะด

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    kb = [
        [KeyboardButton(text="ะะพะฑะฐะฒะธัั ะฐะบะบะฐัะฝั")]
    ]
    keyboard_start = ReplyKeyboardMarkup(keyboard=kb)
    text_start = (f"๐ ะัะธะฒะตั, {message.from_user.full_name}! \n"
                  "ะฏ ะฟะพะผะพะณั ัะธะฝััะพะฝะธะทะธัะพะฒะฐัั ัะฒะพะธ ะฟะปะตะนะปะธััั ะผะตะถะดั ะฟะปะฐััะพัะผะฐะผะธ. \n"
                  "ะะปั ะฝะฐัะฐะปะฐ, ะฟะพะถะฐะปัะนััะฐ, ะฐะฒัะพัะธะทัะนัั ะฒ ัะตัะฒะธัะฐั, ั ะบะพัะพััะผะธ ัั ัะพัะตัั ัะฐะฑะพัะฐัั. \n"
                  "ะญัะฐ ััะฝะบัะธั ะฒัะตะณะดะฐ ะดะพัััะฟะฝะฐ ะฟะพ ะบะพะผะฐะฝะดะต /add_acc")
    await message.answer(text_start, reply_markup=keyboard_start)

@dp.message(Command("add_acc"))
async def command_add_acc_handler(message: Message, command: CommandObject) -> None:
    if command.args is not None:
        platform = command.args.split()[0]
        if platform in vk_names:
            await vk_login(message)
        elif platform in yandex_names:
            await yandex_login(message)
        elif platform in spotify_names:
            await spotify_login(message)
        elif platform in zvooq_names:
            await zvooq_login(message)
        else:
            await message.answer("ะฏ ะฝะต ะทะฝะฐั ัะฐะบะพะน ะฟะปะฐััะพัะผั, \n"
                                 "ะฟะพะฟัะพะฑัะน ะฒะฒะตััะธ ัะพะปัะบะพ /add_acc")
    else:
        await add_acc(message)

#ะพะฑัะฐะฑะพัะบะฐ ัะตะบััะพะฒัั ัะพะพะฑัะตะฝะธะน

@dp.message(F.text.in_(add_acc_mess))
async def message_add_acc_handler(message: Message) -> None:
    await add_acc(message)

@dp.message(F.text == "ะะพัะพะฒะพ")
async def message_done_handler(message: Message, state: FSMContext) -> None:
    keyboard = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="ะะปะตะนะปะธััั ะฒ VK")
    button_yandex = KeyboardButton(text="ะะปะตะนะปะธััั ะฒ ะฏะฝะดะตะบั ะัะทัะบะต")
    button_spotify = KeyboardButton(text="ะะปะตะนะปะธััั ะฒ Spotify")
    button_zvooq = KeyboardButton(text="ะะปะตะนะปะธััั ะฒ Zvooq")

    accs = []
    token_vk = vk_sync.db.get_token(message.from_user.id, "vk")
    if token_vk:
        accs.append("VK ะัะทัะบะฐ")
        keyboard.add(button_vk)

    token_spotify = spotify_manager.db.get_token(message.from_user.id, "spotify")
    if token_spotify:
        accs.append("Spotify")
        keyboard.add(button_spotify)
    '''
    for (i in ะฟะปะฐััะพัะผั):
        if (ะตััั ะฐะบะบ i ะฒ ะฑะด):
            keyboard.add(button_ะฟะปะฐััะพัะผะฐ)
            accs.append("ะฟะปะฐััะพัะผะฐ")
    '''

    if len(accs) == 0:
        button_add_acc = KeyboardButton(text="ะะพะฑะฐะฒะธัั ะฐะบะบะฐัะฝั")
        keyboard.add(button_add_acc)
        text = ("ะััะถะธัะต, ัะตะฑั ะฝะตั ะฟะพะดะบะปััะตะฝะฝัั ะฐะบะบะฐัะฝัะพะฒ :( \n"
                "ะะฒัะพัะธะทัะนัั ะฝะฐ ะฟะปะฐััะพัะผะฐั ะธ ะผั ะฟัะพะดะพะปะถะธะผ ๐")

    elif len(accs) == 1:
        text = (f"ะขั ะฟัะธะฒัะทะฐะป 1 ะฐะบะบะฐัะฝั ะฒ ัะตัะฒะธัะต {accs[0]}\n"
                "ะะตัะตัะพะดะธะผ ะบ ะฒัะฑะพัั ะฟะปะตะนะปะธััะฐ!")

    else:
        text = (f"ะขั ะฟัะธะฒัะทะฐะป {len(accs)} ัะตัะฒะธัะฐ \n"
                "ะัะฑะตัะธ ะฟะปะฐััะพัะผั, ะฝะฐ ะบะพัะพัะพะน ัั ัะพัะตัั ะฒัะฑัะฐัั ะฟะปะตะนะปะธัั")

    await message.answer(text, reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(ChoosePlaylist.choosing_platform)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "ะะปะตะนะปะธััั ะฒ VK")
async def choose_vk_playlist(message: Message, state: FSMContext):
    token_vk = vk_sync.db.get_token(message.from_user.id, "vk")
    vk_session = vk_api.VkApi(token=token_vk)
    vk = vk_session.get_api()
    user_vk_id = vk.users.get()[0]['id']
    playlists = vk.list_playlists(user_vk_id)
    builder = InlineKeyboardBuilder()
    for playlist in playlists:
        builder.row(InlineKeyboardButton(
            text=playlist['title'],
            url=f"https://vk.com/music/playlist/{user_vk_id}_{playlist['id']}")
        )
    await message.answer(
        'ะขัะบะฝะธ ะฝะฐ ะฝัะถะฝัะน ะฟะปะตะนะปะธัั',
        reply_markup=builder.as_markup(),
    )
    await state.set_state(ChoosePlaylist.choosing_playlist)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "ะะปะตะนะปะธััั ะฒ Spotify")
async def choose_spotify_playlist(message: Message, state: FSMContext):
    token_spotify = spotify_manager.db.get_token(message.from_user.id, "spotify")
    spotify = spotipy.Spotify(auth=token_spotify)
    user_spotify_id = spotify.current_user()
    playlists = spotify.current_user_playlists()
    builder = InlineKeyboardBuilder()
    while playlists:
        for playlist in playlists['items']:
            name = playlist['name']
            url = playlist['external_urls']['spotify']
            builder.row(InlineKeyboardButton(
                text=name,
                url=url)
            )
        if playlists['next']:
            playlists = spotify.next(playlists)
        else:
            playlists = None
    await message.answer(
        'ะขัะบะฝะธ ะฝะฐ ะฝัะถะฝัะน ะฟะปะตะนะปะธัั',
        reply_markup=builder.as_markup(),
    )
    await state.set_state(ChoosePlaylist.choosing_playlist)

@dp.message(F.text.in_(vk_names))
async def message_add_vk_acc_handler(message: Message) -> None:
    await vk_login(message)

@dp.message(lambda message: message.text.startswith('https://oauth.vk.com/blank.html'))
async def save_token(message: Message):
    result = vk_sync.vk_save_token('vk', message.from_user.id, message.text)
    await message.reply(result)
    await extra_acc(message)

@dp.message(lambda message: message.text.startswith('urn:ietf:wg:oauth:2.0:oob'))
async def save_token(message: Message):
    """
        ะะฑัะฐะฑะฐััะฒะฐะตะผ URL, ะบะพัะพััะน ะฟะพะปัะทะพะฒะฐัะตะปั ะฟัะธััะปะฐะตั ะฟะพัะปะต ะฐะฒัะพัะธะทะฐัะธะธ.
        """
    user_id = message.from_user.id
    callback_url = message.text

    # ะะทะฒะปะตะบะฐะตะผ ัะพะบะตะฝ ะธะท callback URL (Spotify ะฒะพะทะฒัะฐัะฐะตั ะตะณะพ ะฒ ะฒะธะดะต ััะฐะณะผะตะฝัะฐ URL)
    try:
        token = callback_url.split("access_token=")[1].split("&")[0]
        spotify_sync.save_token(user_id, token)
        await message.answer("ะะฒัะพัะธะทะฐัะธั ะฟัะพัะปะฐ ััะฟะตัะฝะพ! ะขะตะฟะตัั ะฒั ะผะพะถะตัะต ะฟัะพัะผะฐััะธะฒะฐัั ัะฒะพะธ ะฟะปะตะนะปะธััั.")
    except IndexError:
        await message.answer("ะะต ัะดะฐะปะพัั ะธะทะฒะปะตัั ัะพะบะตะฝ. ะัะพะฒะตัััะต ะฟัะฐะฒะธะปัะฝะพััั ะฒะฒะตะดัะฝะฝะพะณะพ URL.")


"""
@dp.message(lambda message: message.text.lower() in ['vk', 'spotify', 'yandex', 'zvook'])
async def sync_playlist(message: Message):
    platform = message.text.lower()
    result = playlist_manager.sync_playlist(platform, message.from_user.id)
    await message.reply(result)"""

@dp.message(F.text.in_(yandex_names))
async def message_add_yandex_acc_handler(message: Message) -> None:
    await yandex_login(message)

@dp.message(F.text.in_(spotify_names))
async def message_add_spotify_acc_handler(message: Message) -> None:
    await spotify_login(message)

@dp.message(F.text.in_(zvooq_names))
async def message_add_zvooq_acc_handler(message: Message) -> None:
    await zvooq_login(message)

##ะฝะตะฟะพะฝ
@dp.message()
async def unknown_message_handler(message: Message) -> None:
    await message.answer("ะฝะตะฟะพะฝ....")

#ะปะพะณะธะฝั

async def add_acc(message):
    keyboard_add_acc = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="VK")
    button_yandex = KeyboardButton(text="ะฏะฝะดะตะบั ะัะทัะบะฐ")
    button_spotify = KeyboardButton(text="Spotify")
    button_zvooq = KeyboardButton(text="Zvooq")
    keyboard_add_acc.add(button_vk, button_yandex, button_spotify, button_zvooq)
    keyboard_add_acc.adjust(2)
    text_add_acc = ("ะัะฑะตัะธ ะฟะปะฐััะพัะผั ะดะปั ะฐะฒัะพัะธะทะฐัะธะธ")
    await message.answer(text_add_acc, reply_markup=keyboard_add_acc.as_markup(resize_keyboard=True))

async def vk_login(message):
    auth_url = vk_sync.get_auth_url('vk')
    await message.reply(f"ะะพะฒะธ ัััะปะบั ะดะปั ะฐะฒัะพัะธะทะฐัะธะธ:\n{auth_url}\n"
                        f"ะะพัะปะต ะฐะฒัะพัะธะทะฐัะธะธ ะพัะฟัะฐะฒััะต ะผะฝะต ัััะปะบั ะธะท ะฐะดัะตัะฝะพะน ัััะพะบะธ")

async def yandex_login(message):
    await message.answer("๐ ะกะพัะธ, ะัะธะฝะฐ ััะฟะฐั, ะฟะพััะพะผั ั ะตัะต ะฝะต ัะผะตั ะปะพะณะธะฝะธัััั ะฒ ัะฝะดะตะบัะต")
    await extra_acc(message)

async def spotify_login(message):
    auth_url = spotify_sync.get_auth_url(message.from_user.id)
    await message.reply(
        f"ะัะพะนะดะธัะต ะฐะฒัะพัะธะทะฐัะธั ัะตัะตะท Spotify ะฟะพ ััะพะน ัััะปะบะต:\n{auth_url}\n"
        "ะะพัะปะต ะฐะฒัะพัะธะทะฐัะธะธ ะฒะฒะตะดะธัะต ะบะพะด, ะบะพัะพััะน ะฒั ัะฒะธะดะธัะต ะฝะฐ ัะบัะฐะฝะต."
    )

async def zvooq_login(message):
    await message.answer("๐ ะกะพัะธ, ะัะธะฝะฐ ััะฟะฐั, ะฟะพััะพะผั ั ะตัะต ะฝะต ัะผะตั ะปะพะณะธะฝะธัััั ะฒ ะทะฒัะบะต \n" +
                            html.spoiler("(ะธ ะฒะพะพะฑัะต ัั ััะพ ะบะพะฝัะตะฝะฝัะน ะบะฐะบะพะน ะทะฒัะบ ะบัะพ ะธะผ ะฒะพะพะฑัะต ะฟะพะปัะทัะตััั)"))
    await extra_acc(message)

async def extra_acc(message):
    text = "ะขั ัะพัะตัั ะฐะฒัะพัะธะทะพะฒะฐัััั ะณะดะต-ัะพ ะตัะต?"
    kb = [
        [KeyboardButton(text="ะะพะฑะฐะฒะธัั ะตัะต ะฐะบะบะฐัะฝั")],
        [KeyboardButton(text="ะะพัะพะฒะพ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(text, reply_markup=keyboard)

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())