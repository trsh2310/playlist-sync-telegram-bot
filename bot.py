import asyncio
import logging
import sys
import waiting

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from yandex_music.exceptions import UnauthorizedError
from yandex_music import Client
import platform_manager.spotify_manager as S
from platform_manager.vk_manager import VKMusicManager
import platform_manager.yandex_manager as Y
from playlist import Playlist
from config import TELEGRAM_TOKEN, VK_APP_ID
from names import vk_names, spotify_names, add_acc_mess, yandex_names

import spotipy
import vk_api

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
dp = Dispatcher(storage=MemoryStorage())

vk_user = None
vk_code = None
yandex_user = None
yandex_token = ''
spotify_user = None
platforms = {
    "Spotify" : False,
    "–í–ö" : False,
    "–Ø–Ω–¥–µ–∫—Å" : False
}
cur_playlist = None
not_matched = None


def create_keyboard(platforms):
    buttons = [
        [KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω")]
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å", –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if platforms.get("–Ø–Ω–¥–µ–∫—Å"):
        buttons.append([KeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Spotify" (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    if platforms.get("Spotify"):
        buttons.append([KeyboardButton(text="–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Spotify")])

    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True,
    )
#–∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ChoosePlaylist(StatesGroup):
    choosing_platform = State()
    choosing_playlist_spotify = State()
    choosing_playlist_yandex = State()
    choosing_playlist_vk = State()
    choosing_action = State()
    none = State()
class VkLogin(StatesGroup):
    waiting_for_credentials = State()
    none = State()
class SpotifyLogin(StatesGroup):
    waiting_for_link = State()
    none = State()
class YandexLogin(StatesGroup):
    waiting_for_token = State()
    none = State()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart()) #–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
async def command_start_handler(message: Message, state: FSMContext) -> None:
    kb = [[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]]
    keyboard_start = ReplyKeyboardMarkup(keyboard=kb)
    text_start = (f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! \n"
                  "–Ø –ø–æ–º–æ–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏. \n"
                  "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å. \n"
                  "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /add_acc \n")
    await message.answer(text_start, reply_markup=keyboard_start, resize_keyboard=True)
    await message.answer(text="–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —Ç—ã–∫–Ω–∏ –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /home")

@dp.message(Command("add_acc")) #–∞–Ω–∞–ª–æ–≥ "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def command_add_acc_handler(message: Message, command: CommandObject, state: FSMContext) -> None:
    if command.args is not None:
        platform = command.args.split()[0]
        if platform in vk_names:
            await vk_login(message, state)
        elif platform in spotify_names:
            await spotify_login(message, state)
        elif platform in yandex_names:
            await yandex_login(message, state)
        else:
            await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, \n"
                                 "–ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ /add_acc")
    else:
        await add_acc(message)

@dp.message(Command("home")) #–∞–Ω–∞–ª–æ–≥ "–≥–æ—Ç–æ–≤–æ"
async def command_home_handler(message: Message, command: CommandObject, state) -> None:
    await homepage(message, state)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.in_(add_acc_mess)) #"–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def message_add_acc_handler(message: Message, state: FSMContext) -> None:
    await add_acc(message)

@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def message_done_handler(message: Message, state: FSMContext) -> None:
    await homepage(message, state)

##–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
@dp.message(F.text.in_(vk_names))
async def message_add_vk_acc_handler(message: Message, state: FSMContext) -> None:
    await vk_login(message, state)

@dp.message(F.text.in_(spotify_names))
async def message_add_spotify_acc_handler(message: Message, state: FSMContext) -> None:
    await spotify_login(message, state)

@dp.message(F.text.in_(yandex_names))
async def message_add_spotify_acc_handler(message: Message, state: FSMContext) -> None:
    await yandex_login(message, state)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
##–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(VkLogin.waiting_for_credentials) #–æ–∂–∏–¥–∞–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –æ—Ç –≤–∫
async def vk_process_credentials(message: Message, state: FSMContext):
    global platforms, vk_user
    logging.info(f"Processing credentials:")
    try:
        login, password = message.text.split()
        vk_session = vk_api.VkApi(
            login=login,
            password=password,
            auth_handler=auth_handler(),
            app_id=VK_APP_ID
        )
        vk_session.auth()
        vk_user = VKMusicManager(vk_session)
        await message.reply("–°—É–ø–µ—Ä! –¢—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ –í–ö!")
        platforms["–í–ö"] = True
        await state.set_state(VkLogin.none)
        await extra_acc(message)

    except vk_api.AuthError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    except Exception as e:
        await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    except:
        await message.reply(f"–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ –µ—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ")

####–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ 2fa
def auth_handler():
    global vk_code
    return waiting.wait(lambda: vk_code), True
def two_fa_code_handler(message):
    global vk_code
    vk_code = message.text

@dp.message(SpotifyLogin.waiting_for_link) #–æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç —Å–ø–æ—Ç–∏—Ñ–∞—è
async def spotify_process_token(message: Message, state: FSMContext):
    global platforms, spotify_user
    spotify_code = message.text
    f = S.save_token(spotify_code, auth_spotify)
    platforms["Spotify"] = True
    if not f:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ—Ä–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        await state.set_state(SpotifyLogin.waiting_for_link)
    else:
        spotify_token = f['access_token']
        try:
            spotify_user = spotipy.Spotify(auth=spotify_token)
            await message.answer("–°—É–ø–µ—Ä! –¢—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ —Å–ø–æ—Ç–∏–∫–µ!")
            await state.set_state(SpotifyLogin.none)
            await extra_acc(message)
        except spotipy.SpotifyException as e:
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        except Exception as e:
            await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! –û—à–∏–±–∫–∞: {e}")
        except:
            await message.reply(f"–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ –µ—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ")

@dp.message(YandexLogin.waiting_for_token) #–æ–∂–∏–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç —è–Ω–¥–µ–∫—Å–∞
async def yandex_process_token(message : Message, state):
    global platforms
    global yandex_user, yandex_token
    try:
        yandex_token = message.text
        yandex_user = Client(yandex_token).init()
    except UnauthorizedError:
        await message.reply(f'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞')
        logger.error('Could not log into yandex music')
        return
    except:
        await message.reply(f"–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ –µ—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ")
        return
    await message.answer("–°—É–ø–µ—Ä! –¢—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ!")
    await state.set_state(YandexLogin.none)
    platforms["–Ø–Ω–¥–µ–∫—Å"] = True
    logger.info('Logged into yandex music')
    await extra_acc(message)

##–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
###–≤—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
@dp.message(ChoosePlaylist.choosing_platform)
async def choose_playlist(message: Message, state: FSMContext):
    if message.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ –í–ö":
        if platforms["–í–ö"]:
            global vk_user
            try:
                playlists = vk_user.get_playlists()
            except:
                await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... \n"
                                     "–¢—ã–∫–Ω–∏ /home")
            if not playlists:
                await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–ª—å–±–æ–º–æ–≤ –≤ –≤–∫, –∫ –∫–æ—Ç–æ—Ä—ã–º —è –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø")
                return
            builder = InlineKeyboardBuilder()
            for playlist in playlists:
                name = playlist['title']
                url = playlist['url']
                builder.row(InlineKeyboardButton(
                    text=name,
                    url=url)
                )
            await state.set_state(ChoosePlaylist.choosing_playlist_vk)
            await message.answer(
                '–¢—ã–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                reply_markup=builder.as_markup(),
            )
        else:
            await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º, –Ω—É–∂–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è! \n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_acc")

    elif message.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ Spotify":
        if platforms["Spotify"]:
            global spotify_user
            print(spotify_user)
            user_data = spotify_user.current_user()
            playlists = spotify_user.user_playlists(user_data['id'])['items']
            all_pl = [i['name'] for i in playlists]

            if not all_pl:
                await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.')
                await state.set_state(ChoosePlaylist.choosing_platform)
                return

            all_pl_text = '\n'.join(all_pl)
            await message.answer(
                f'–í—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã :\n'
                f'{all_pl_text}\n'
                f'\n'
                f'–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –ø–ª–µ–π–ª–∏—Å—Ç, —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å'
            )
            await state.set_state(ChoosePlaylist.choosing_playlist_spotify)
        else:
            await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º, –Ω—É–∂–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è! \n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_acc")

    elif message.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å":
        if platforms["–Ø–Ω–¥–µ–∫—Å"]:
            await state.set_state(ChoosePlaylist.choosing_playlist_yandex)
            await message.answer(
                '–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ',
                )
        else:
            await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º, –Ω—É–∂–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è! \n"
                                 "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_acc")

###–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
@dp.message(ChoosePlaylist.choosing_playlist_spotify) #–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –≤ —Å–ø–æ—Ç–∏—Ñ–∞–µ
async def spotify_playlist_options(message, state):
    url = message.text
    global cur_playlist, spotify_user
    cur_playlist = Playlist()
    try:
        cur_playlist.from_spotify(url, spotify_user)
    except ValueError:
        await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        await state.set_state(ChoosePlaylist.choosing_playlist_spotify)
        return
    cur_playlist.from_spotify(url, spotify_user)
    global platforms
    text = f"–ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º *{cur_playlist.name}*?"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω")]])
    if platforms["–Ø–Ω–¥–µ–∫—Å"]:
        kb = create_keyboard(platforms)
    await message.answer(text, reply_markup=kb)
    await state.set_state(ChoosePlaylist.choosing_action)

@dp.message(ChoosePlaylist.choosing_playlist_yandex) #–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –≤ —è–Ω–¥–µ–∫—Å–µ
async def yandex_playlist_options(message, state):
    global yandex_user, yandex_token
    url = message.text
    global cur_playlist, yandex_user
    cur_playlist = Playlist()
    try:
        yandex_user = Client(yandex_token).init()
        cur_playlist.from_yandex(url, yandex_user)
        print(yandex_user)
    except ValueError:
        await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        await state.set_state(ChoosePlaylist.choosing_playlist_yandex)
        return
    global platforms
    text = f"–ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º *{cur_playlist.name}*?"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω")]])
    await message.answer(text, reply_markup=kb)
    await state.set_state(ChoosePlaylist.choosing_action)  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    print(f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {url}")
    print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")
    if platforms["Spotify"]:
        kb.add(KeyboardButton(text=f"–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Spotify"))
    await message.answer(text, reply_markup=kb)
    await state.set_state(ChoosePlaylist.choosing_action)

@dp.message(ChoosePlaylist.choosing_playlist_vk) #–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º –≤ –≤–∫
async def vk_playlist_options(message, state):
    name = message.text
    global cur_playlist, vk_user
    cur_playlist = Playlist()
    try:
        cur_playlist.from_vk(name, vk_user)
    except ValueError:
        await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        await state.set_state(ChoosePlaylist.choosing_playlist_vk)
        return
    global platforms
    text = f"–ß—Ç–æ —Å–¥–µ–ª–∞–µ–º —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º *{cur_playlist.name}*?"
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω")]])
    for plat_name, plat_use in platforms.items():
        if plat_name != "–í–ö":
            if plat_use:
                kb.add(KeyboardButton(text=f"–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ {plat_name}"))
    await message.answer(text, reply_markup=kb)
    await state.set_state(ChoosePlaylist.choosing_action)

###—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
@dp.message(ChoosePlaylist.choosing_action) #–≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
async def playlist_options(message, state):
    global cur_playlist
    if not cur_playlist or not isinstance(cur_playlist, Playlist):
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –º—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –µ—â–µ —Ä–∞–∑\n"
                             "–¢—ã–∫–Ω–∏ /home")
        return
    if message.text == "–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω":
        await state.set_state(ChoosePlaylist.none)
        text = f"*{cur_playlist.name}* \n"
        for (artist, track) in cur_playlist.tracks:
            text += f"{artist} - {track}\n"
        await message.answer(text=text, parse_mode="Markdown")
    elif message.text == "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –í–ö":
        await state.set_state(ChoosePlaylist.choosing_action)
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è —Ç–∞–∫–æ–µ –Ω–µ —É–º–µ—é, \n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    elif message.text == "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å":
        global yandex_user, yandex_token, not_matched
        if platforms["–Ø–Ω–¥–µ–∫—Å"]:
            await state.set_state(ChoosePlaylist.none)
            await message.answer(f"–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–Ω–æ—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ {cur_playlist.platform} –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É...")
            try:
                not_found = Y.new_playlist(cur_playlist, yandex_user, yandex_token)
                await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ {cur_playlist.platform} –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É!")
                if not_found:
                    not_found_s = '\n'.join(not_found)
                    await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å: \n"
                                         f"{not_found_s}")
            except:
                await message.answer("–ü–µ—Ä–µ–Ω–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:( \n"
                                     "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —Ç—ã–∫–Ω—É–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /home")
        else:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ –Ø–Ω–¥–µ–∫—Å–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_acc")
    elif message.text == "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Spotify":
        global spotify_user
        if platforms["Spotify"]:
            await state.set_state(ChoosePlaylist.none)
            await message.answer(f"–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–Ω–æ—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ {cur_playlist.platform} –≤ Spotify...")
            try:
                S.new_playlist(cur_playlist, spotify_user)
                await message.answer(f"–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ {cur_playlist.platform} –≤ Spotify!")
            except:
                await message.answer("–ü–µ—Ä–µ–Ω–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:( \n"
                                     "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —Ç—ã–∫–Ω—É–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /home")
        else:
            await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ Spotify —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_acc")
    await message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, —Ç—ã–∫–Ω–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /home")

##–æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message()
async def unknown_message_handler(message: Message, state: FSMContext) -> None:
    await message.answer("–Ω–µ–ø–æ–Ω....")

#–ª–æ–≥–∏–Ω—ã
async def vk_login(message, state):
    """–ø—Ä–æ—Å–∏—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∫"""
    await message.reply(f"–í–≤–µ–¥–∏ —Å–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await state.set_state(VkLogin.waiting_for_credentials)

async def spotify_login(message, state):
    """–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏ –≤ —Å–ø–æ—Ç–∏—Ñ–∞–µ"""
    global auth_spotify
    S.logout()
    auth_spotify = S.get_auth_url()
    auth_url = auth_spotify.get_authorize_url()
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–í–æ–π—Ç–∏ –≤ —Å–ø–æ—Ç–∏–∫",
        url=auth_url)
    )
    await message.reply(f"–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \n"
                        f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∫–∏–Ω—å –º–Ω–µ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ code=",
                        parse_mode="Markdown",
                        reply_markup=builder.as_markup())
    await state.set_state(SpotifyLogin.waiting_for_link)

async def yandex_login(message : Message, state):
    """–≤—ã–≤–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏ –≤ —è–Ω–¥–µ–∫—Å–µ"""
    instruction = Y.instruct()
    await message.answer(instruction)
    await state.set_state(YandexLogin.waiting_for_token)


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
async def add_acc(message): #–ø–µ—Ä–≤—ã–π
    keyboard_add_acc = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="VK")
    button_spotify = KeyboardButton(text="Spotify")
    button_yandex = KeyboardButton(text="–Ø–Ω–¥–µ–∫—Å")
    keyboard_add_acc.add(button_vk, button_spotify, button_yandex)
    text_add_acc = "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    await message.answer(text_add_acc, reply_markup=keyboard_add_acc.as_markup(resize_keyboard=True))

async def extra_acc(message): #–ø–æ—Å–ª–µ–¥—É—é—â–∏–µ
    text = "–¢—ã —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ?"
    kb = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç")],
        [KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(text, reply_markup=keyboard)

#–Ω–∞—á–∞–ª–æ, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ —Ç–µ—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
async def homepage(message, state):
    global platforms
    keyboard = ReplyKeyboardBuilder()
    accs = []
    for plat_name, plat_use in platforms.items():
        if plat_use:
            accs.append(plat_name)
            keyboard.add(KeyboardButton(text=f"–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ {plat_name}"))
    if not accs:
        button_add_acc = KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        keyboard.add(button_add_acc)
        text = ("–î—Ä—É–∂–∏—â–µ, —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ :( \n"
                    "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üíã")
    elif len(accs) == 1:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª 1 –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Ä–≤–∏—Å–µ {accs[0]}\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç–∞!")
    else:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª {len(accs)} —Å–µ—Ä–≤–∏—Å–∞\n"
                "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")

    await message.answer(text, reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(ChoosePlaylist.choosing_platform)


#–±–∞–∑–∞
async def main() -> None:
    bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())