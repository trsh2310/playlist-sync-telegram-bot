import asyncio
import logging
import sys
from distutils.command.install import install
import sqlite3

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from auto.spotify_manager import SpotifySync
from auto.vk_manager import VKMusicManager
from config import TELEGRAM_TOKEN, VK_APP_ID

import spotipy

from models import Database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


yandex_names = ['yandex', 'Yandex', 'YANDEX',
                'yandex music', 'yandex.music', 'Yandex music', 'Yandex Music', 'Yandex.Music',
                '—è–Ω–¥–µ–∫—Å', '–Ø–Ω–¥–µ–∫—Å', '–Ø–ù–î–ï–ö–°',
                '—è–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∞', '–Ø–Ω–¥–µ–∫—Å –º—É–∑—ã–∫–∞', '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞', '–Ø–Ω–¥–µ–∫—Å.–ú—É–∑—ã–∫–∞', '–Ø.–ú—É–∑—ã–∫–∞']
vk_names = ['vk', 'Vk', 'VK',
            'vkontakte', 'v kontakte', 'Vkontakte', 'V kontakte', 'VKontakte', 'V Kontakte', 'VKONTAKTE', 'V KONTAKTE',
            'vk music', 'Vk music', 'Vk Music', 'VK music', 'VK Music', 'VK MUSIC',
            'vk –º—É–∑—ã–∫–∞', 'Vk –º—É–∑—ã–∫–∞', 'Vk –ú—É–∑—ã–∫–∞', 'VK –º—É–∑—ã–∫–∞', 'VK –ú—É–∑—ã–∫–∞', 'VK –ú–£–ó–´–ö–ê',
            '–º—É–∑—ã–∫–∞ vk', '–º—É–∑—ã–∫–∞ Vk', '–ú—É–∑—ã–∫–∞ Vk', '–º—É–∑—ã–∫–∞ VK', '–ú—É–∑—ã–∫–∞ VK', '–ú–£–ó–´–ö–ê VK',
            '–≤–∫', '–í–∫', '–í–ö',
            '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', '–≤ –∫–æ–Ω—Ç–∞–∫—Ç–µ', '–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', '–í –∫–æ–Ω—Ç–∞–∫—Ç–µ', '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ', '–í –ö–æ–Ω—Ç–∞–∫—Ç–µ', '–í–ö–û–ù–¢–ê–ö–¢–ï', '–í –ö–û–ù–¢–ê–ö–¢–ï',
            '–≤–∫ –º—É–∑—ã–∫–∞', '–í–∫ –º—É–∑—ã–∫–∞', '–í–∫ –ú—É–∑—ã–∫–∞', '–í–ö –º—É–∑—ã–∫–∞', '–í–ö –ú—É–∑—ã–∫–∞', '–í–ö –ú–£–ó–´–ö–ê',
            '–º—É–∑—ã–∫–∞ –≤–∫', '–º—É–∑—ã–∫–∞ –í–∫', '–ú—É–∑—ã–∫–∞ –í–∫', '–º—É–∑—ã–∫–∞ –í–ö', '–ú—É–∑—ã–∫–∞ –í–ö', '–ú–£–ó–´–ö–ê –í–ö']
spotify_names = ['spotify', 'Spotify', 'SPOTIFY',
                '—Å–ø–æ—Ç–∏—Ñ–∞–π', '–°–ø–æ—Ç–∏—Ñ–∞–π', '–°–ü–û–¢–ò–§–ê–ô',
                '—Å–ø–æ—Ç–∏–∫', '–°–ø–æ—Ç–∏–∫', '–°–ü–û–¢–ò–ö']
zvooq_names = ['zvooq', 'Zvooq', 'ZVOOQ',
               'zvook', 'Zvook', 'ZVOOK',
               '–∑–≤—É–∫', '–ó–≤—É–∫', '–ó–í–£–ö']

add_acc_mess = ["–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç",
                "–¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", "–¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç"]

TOKEN = TELEGRAM_TOKEN
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

conn = sqlite3.connect('users.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (
             id INTEGER PRIMARY KEY AUTOINCREMENT,
             tg_user_id INTEGER,
             platform TEXT,
             login TEXT,
             password TEXT)''')
conn.commit()
spotify_sync = SpotifySync(conn)

class ChoosePlaylist(StatesGroup):
    choosing_platform = State()
    choosing_playlist = State()

class VkLogin(StatesGroup):
    waiting_for_credentials = State()
    awaiting_sms_code = State()


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    kb = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]
    ]
    keyboard_start = ReplyKeyboardMarkup(keyboard=kb)
    text_start = (f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! \n"
                  "–Ø –ø–æ–º–æ–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏. \n"
                  "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å. \n"
                  "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /add_acc \n"
                  "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —Ç—ã–∫–Ω–∏ –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /home")
    await message.answer(text_start, reply_markup=keyboard_start)

@dp.message(Command("add_acc"))
async def command_add_acc_handler(message: Message, command: CommandObject) -> None:
    if command.args is not None:
        platform = command.args.split()[0]
        if platform in vk_names:
            await vk_login(message)
        elif platform in yandex_names:
            await yandex_login(message)
        elif platform in spotify_names:
            await spotify_login(message)
        elif platform in zvooq_names:
            await zvooq_login(message)
        else:
            await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, \n"
                                 "–ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ /add_acc")
    else:
        await add_acc(message)

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@dp.message(F.text.in_(add_acc_mess))
async def message_add_acc_handler(message: Message) -> None:
    await add_acc(message)

@dp.message(Command("home") | F.text == "–ì–æ—Ç–æ–≤–æ")
async def message_done_handler(message: Message, state: FSMContext) -> None:
    keyboard = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ VK")
    button_yandex = KeyboardButton(text="–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ")
    button_spotify = KeyboardButton(text="–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ Spotify")
    button_zvooq = KeyboardButton(text="–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ Zvooq")

    accs = []
    c.execute("SELECT COUNT(*) FROM users WHERE tg_user_id = ? AND platform = ?",
              (message.from_user.id, "vk"))
    if c.fetchone()[0] > 0:
        accs.append("VK –ú—É–∑—ã–∫–∞")
        keyboard.add(button_vk)

    token_spotify = spotify_sync.db.get_token(message.from_user.id, "spotify")
    if token_spotify:
        accs.append("Spotify")
        keyboard.add(button_spotify)
    '''
    for (i in –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã):
        if (–µ—Å—Ç—å –∞–∫–∫ i –≤ –±–¥):
            keyboard.add(button_–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)
            accs.append("–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞")
    '''

    if len(accs) == 0:
        button_add_acc = KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        keyboard.add(button_add_acc)
        text = ("–î—Ä—É–∂–∏—â–µ, —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ :( \n"
                "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üíã")

    elif len(accs) == 1:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª 1 –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Ä–≤–∏—Å–µ {accs[0]}\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç–∞!")

    else:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª {len(accs)} —Å–µ—Ä–≤–∏—Å–∞ \n"
                "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")

    await message.answer(text, reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(ChoosePlaylist.choosing_platform)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ VK")
async def choose_vk_playlist(message: Message, state: FSMContext, vk_session):
    manager = VKMusicManager(vk_session)
    playlists = manager.list_playlists()
    builder = InlineKeyboardBuilder()
    vk_api_instance = vk_session.get_api()
    user_info = vk_api_instance.users.get()
    user_vk_id = user_info[0]['id']
    for title, playlist_id in playlists:
        builder.row(InlineKeyboardButton(
            text=title,
            url=f"https://vk.com/music/playlist/{user_vk_id}_{playlist_id}")
        )
    await message.answer(
        '–¢—ã–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç',
        reply_markup=builder.as_markup(),
    )
    await state.set_state(ChoosePlaylist.choosing_playlist)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ Spotify")
async def choose_spotify_playlist(message: Message, state: FSMContext):
    try:
        token_spotify = spotify_sync.db.get_token(message.from_user.id, "spotify")
        if not token_spotify:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (1)")
            return
        spotify = spotipy.Spotify(auth=token_spotify)
        user_data = spotify.current_user()
        if not user_data:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (2)")
            return
        user_spotify_id = user_data.get('id')
        if not user_spotify_id:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (3)")
            return
        playlists_response = spotify.user_playlists(user_spotify_id)
        if not playlists_response or 'items' not in playlists_response:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã")
            return
        playlists = playlists_response['items']
        if not playlists:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤ —Å–ø–æ—Ç–∏–∫–µ")
            return
        builder = InlineKeyboardBuilder()
        for playlist in playlists:
            name = playlist.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            url = playlist.get('external_urls', {}).get('spotify')
            if url:
                builder.add(InlineKeyboardButton(text=name, url=url))
        await message.answer(
            '–¢—ã–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç',
            reply_markup=builder.as_markup(),
        )
        await state.set_state(ChoosePlaylist.choosing_playlist)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ Spotify: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:(")

@dp.message(F.text.in_(vk_names))
async def message_add_vk_acc_handler(message: Message) -> None:
    await vk_login(message)

@dp.message(lambda message: message.text.startswith('urn:ietf:wg:oauth:2.0:oob'))
async def save_token(message: Message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        """
    user_id = message.from_user.id
    callback_url = message.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ callback URL (Spotify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ URL)
    try:
        token = callback_url.split("access_token=")[1].split("&")[0]
        spotify_sync.save_token(user_id, token)
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await extra_acc(message)
    except IndexError:
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")


"""
@dp.message(lambda message: message.text.lower() in ['vk', 'spotify', 'yandex', 'zvook'])
async def sync_playlist(message: Message):
    platform = message.text.lower()
    result = playlist_manager.sync_playlist(platform, message.from_user.id)
    await message.reply(result)"""

@dp.message(F.text.in_(yandex_names))
async def message_add_yandex_acc_handler(message: Message) -> None:
    await yandex_login(message)

@dp.message(F.text.in_(spotify_names))
async def message_add_spotify_acc_handler(message: Message) -> None:
    await spotify_login(message)

@dp.message(F.text.in_(zvooq_names))
async def message_add_zvooq_acc_handler(message: Message) -> None:
    await zvooq_login(message)

@dp.message(VkLogin.waiting_for_credentials)
async def process_credentials(message: Message, state: FSMContext):
    logging.info(f"Processing credentials:")
    data = await state.get_data()
    platform = data.get("platform")
    try:
        login, password = message.text.split()
        global current_user_id
        current_user_id = message.from_user.id
        def sync_auth_handler():
            logging.info("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–∂–∏–¥–∞–Ω–∏–µ SMS-–∫–æ–¥–∞.")
            asyncio.run_coroutine_threadsafe(
                bot.send_message(chat_id=current_user_id, text="–í–≤–µ–¥–∏ SMS-–∫–æ–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."),
                asyncio.get_event_loop()
            )
            future_code = asyncio.run_coroutine_threadsafe(get_sms_code(), asyncio.get_event_loop())
            code = future_code.result()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω SMS-–∫–æ–¥: {code}")
            return code, False
        vk_session = vk_api.VkApi(login=login, password=password, auth_handler=sync_auth_handler, app_id=VK_APP_ID)
        try:
            vk_session.auth()
        except vk_api.AuthError as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return
        c.execute("REPLACE INTO users (tg_user_id, platform, login, password) VALUES (?, ?, ?, ?)",
                      (message.from_user.id, platform, login, password))
        conn.commit()
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ VK!")
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    finally:
        await state.clear()

async def get_sms_code():
    """
    –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ SMS-–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    loop = asyncio.get_event_loop()
    future_code = loop.create_future()
    @dp.message(VkLogin.awaiting_sms_code)
    async def receive_code(message: Message, state: FSMContext):
        if not future_code.done():
            future_code.set_result(message.text.strip())
        await state.clear()
    return await future_code

##–Ω–µ–ø–æ–Ω
@dp.message()
async def unknown_message_handler(message: Message) -> None:
    await message.answer("–Ω–µ–ø–æ–Ω....")

#–ª–æ–≥–∏–Ω—ã

async def add_acc(message):
    keyboard_add_acc = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="VK")
    button_yandex = KeyboardButton(text="–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞")
    button_spotify = KeyboardButton(text="Spotify")
    button_zvooq = KeyboardButton(text="Zvooq")
    keyboard_add_acc.add(button_vk, button_yandex, button_spotify, button_zvooq)
    keyboard_add_acc.adjust(2)
    text_add_acc = ("–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    await message.answer(text_add_acc, reply_markup=keyboard_add_acc.as_markup(resize_keyboard=True))

async def vk_login(message, state: FSMContext):
    await message.reply(f"–í–≤–µ–¥–∏ —Å–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await state.set_state(VkLogin.waiting_for_credentials)


async def yandex_login(message):
    await message.answer("üòî –°–æ—Ä–∏, –ê—Ä–∏–Ω–∞ —Ç—É–ø–∞—è, –ø–æ—ç—Ç–æ–º—É —è –µ—â–µ –Ω–µ —É–º–µ—é –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –≤ —è–Ω–¥–µ–∫—Å–µ")
    await extra_acc(message)

async def spotify_login(message):
    auth_url = spotify_sync.get_auth_url(message.from_user.id)
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–í–æ–π—Ç–∏ –≤ —Å–ø–æ—Ç–∏–∫",
        url=auth_url)
    )
    await message.reply(f"–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \n"
                        f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∫–∏–Ω—å –º–Ω–µ",
                        reply_markup=builder.as_markup())

async def zvooq_login(message):
    await message.answer("üòî –°–æ—Ä–∏, –ê—Ä–∏–Ω–∞ —Ç—É–ø–∞—è, –ø–æ—ç—Ç–æ–º—É —è –µ—â–µ –Ω–µ —É–º–µ—é –ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –≤ –∑–≤—É–∫–µ \n")
    await extra_acc(message)

async def extra_acc(message):
    text = "–¢—ã —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ?"
    kb = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç")],
        [KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(text, reply_markup=keyboard)

async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())