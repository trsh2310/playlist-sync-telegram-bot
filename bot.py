import asyncio
import logging
import sys
import sqlite3
import waiting

from aiogram import Bot, Dispatcher, html, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from models import Database
from platform_manager.spotify_manager import SpotifyManager
from platform_manager.vk_manager import VKMusicManager
from config import TELEGRAM_TOKEN, VK_APP_ID
from names import vk_names, spotify_names, add_acc_mess

import spotipy
import vk_api


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

dp = Dispatcher(storage=MemoryStorage())
vk_code = None
auth_spotify = None

platforms = {
    "Spotify" : False,
    "–í–ö" : False,
    "–Ø–Ω–¥–µ–∫—Å" : False
}

spotify_sync = SpotifyManager()

class ChoosePlaylist(StatesGroup):
    choosing_platform = State()
    choosing_playlist = State()

class VkLogin(StatesGroup):
    waiting_for_credentials = State()
    awaiting_sms_code = State()

class SpotifyLogin(StatesGroup):
    waiting_for_link = State()

#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

@dp.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    kb = [[KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")]]
    keyboard_start = ReplyKeyboardMarkup(keyboard=kb)
    text_start = (f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! \n"
                  "–Ø –ø–æ–º–æ–≥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –º–µ–∂–¥—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏. \n"
                  "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å. \n"
                  "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /add_acc \n"
                  "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —Ç—ã–∫–Ω–∏ –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /home")
    await message.answer(text_start, reply_markup=keyboard_start, resize_keyboard=True)

@dp.message(Command("add_acc"))
async def command_add_acc_handler(message: Message, command: CommandObject, state: FSMContext) -> None:
    if command.args is not None:
        platform = command.args.split()[0]
        if platform in vk_names:
            await vk_login(message, state)
        elif platform in spotify_names:
            await spotify_login(message, state)
        else:
            await message.answer("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, \n"
                                 "–ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ /add_acc")
    else:
        await add_acc(message)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@dp.message(F.text.in_(add_acc_mess))
async def message_add_acc_handler(message: Message, state: FSMContext) -> None:
    await add_acc(message)

@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def message_done_handler(message: Message, state: FSMContext) -> None:
    global platforms
    keyboard = ReplyKeyboardBuilder()
    accs = []
    for plat_name, plat_use in platforms.items():
        if plat_use:
            accs.append(plat_name)
            keyboard.add(KeyboardButton(text=f"–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ {plat_name}"))

    if not accs:
        button_add_acc = KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
        keyboard.add(button_add_acc)
        text = ("–î—Ä—É–∂–∏—â–µ, —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ :( \n"
            "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üíã")
    elif len(accs) == 1:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª 1 –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–µ—Ä–≤–∏—Å–µ {accs[0]}\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–µ–π–ª–∏—Å—Ç–∞!")
    else:
        text = (f"–¢—ã –ø—Ä–∏–≤—è–∑–∞–ª {len(accs)} —Å–µ—Ä–≤–∏—Å–∞\n"
                "–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")


    await message.answer(text, reply_markup=keyboard.as_markup(resize_keyboard=True))
    await state.set_state(ChoosePlaylist.choosing_platform)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ VK")
async def choose_vk_playlist(message: Message, state: FSMContext, vk_session):
    manager = VKMusicManager(vk_session)
    playlists = manager.list_playlists()
    builder = InlineKeyboardBuilder()
    vk_api_instance = vk_session.get_api()
    user_info = vk_api_instance.users.get()
    user_vk_id = user_info[0]['id']
    for title, playlist_id in playlists:
        builder.row(InlineKeyboardButton(
            text=title,
            url=f"https://vk.com/music/playlist/{user_vk_id}_{playlist_id}")
        )
    await message.answer(
        '–¢—ã–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ',
        reply_markup=builder.as_markup(),
    )
    await state.set_state(ChoosePlaylist.choosing_playlist)

@dp.message(ChoosePlaylist.choosing_platform, F.text == "–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ Spotify")
async def choose_spotify_playlist(message: Message, state: FSMContext):
    try:
        if not auth_spotify:
            await message.answer("–û—à–∏–±–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")
            return
        spotify = spotipy.Spotify(auth=auth_spotify)
        user_data = spotify.current_user()
        if not user_data:
            await message.answer("–¢–æ–∫–µ–Ω –µ—Å—Ç—å –∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç:(")
            return
        user_spotify_id = user_data.get('id')
        if not user_spotify_id:
            await message.answer("–î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å id –Ω–µ—Ç")
            return
        playlists_response = spotify.user_playlists(user_spotify_id)
        if not playlists_response or 'items' not in playlists_response:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã")
            return
        playlists = playlists_response['items']

        if not playlists:
            await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –≤ —Å–ø–æ—Ç–∏–∫–µ")
            return
        builder = InlineKeyboardBuilder()
        for playlist in playlists:
            name = playlist['name']
            url = playlist['uri']
            if url:
                builder.add(InlineKeyboardButton(text=name, url=url))
        await message.answer(
            '–¢—ã–∫–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ',
            reply_markup=builder.as_markup(),
        )
        await state.set_state(ChoosePlaylist.choosing_playlist)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ Spotify: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:(")

@dp.message(F.text.in_(vk_names))
async def message_add_vk_acc_handler(message: Message, state: FSMContext) -> None:
    await vk_login(message, state)

@dp.message(F.text.in_(spotify_names))
async def message_add_spotify_acc_handler(message: Message, state: FSMContext) -> None:
    await spotify_login(message, state)


#–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –æ—Ç –≤–∫
@dp.message(VkLogin.waiting_for_credentials)
async def process_credentials(message: Message, state: FSMContext):
    global platforms
    logging.info(f"Processing credentials:")
    try:
        login, password = message.text.split()
        vk_session = vk_api.VkApi(
            login=login,
            password=password,
            auth_handler=auth_handler(message),
            app_id=VK_APP_ID
        )
        vk_session.auth()
        await message.reply("–°—É–ø–µ—Ä! –¢—ã –∑–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ –í–ö")
        platforms["–í–ö"] = True
        await extra_acc(message)

    except vk_api.AuthError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    except Exception as e:
        await message.reply(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message(SpotifyLogin.waiting_for_link)
async def save_token(message: Message, state: FSMContext):
    global platforms
    spotify_code = message.text
    f = spotify_sync.save_token(message.from_user.id, spotify_code, auth_spotify)
    platforms["Spotify"] = True
    await message.answer("–°—É–ø–µ—Ä! –¢—ã –∑–ª–æ–≥–∏–Ω–∏–ª—Å—è –≤ —Å–ø–æ—Ç–∏–∫–µ!")
    await extra_acc(message)
    if not f:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω, –ø–æ—Ä–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        await state.set_state(SpotifyLogin.waiting_for_link)



##–Ω–µ–ø–æ–Ω
@dp.message()
async def unknown_message_handler(message: Message, state: FSMContext) -> None:
    await message.answer("–Ω–µ–ø–æ–Ω....")

#–ª–æ–≥–∏–Ω—ã

def two_fa_code_handler(message):
    global vk_code
    vk_code = message.text


def auth_handler(message):
    global vk_code
    return waiting.wait(lambda: vk_code), True

async def vk_login(message, state):
    await message.reply(f"–í–≤–µ–¥–∏ —Å–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await state.set_state(VkLogin.waiting_for_credentials)

async def spotify_login(message, state):
    global auth_spotify
    auth_spotify = spotify_sync.get_auth_url()
    auth_url = auth_spotify.get_authorize_url()
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–í–æ–π—Ç–∏ –≤ —Å–ø–æ—Ç–∏–∫",
        url=auth_url)
    )
    await message.reply(f"–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ \n"
                        f"–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∫–∏–Ω—å –º–Ω–µ –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ *code=*",
                        parse_mode="Markdown",
                        reply_markup=builder.as_markup())
    await state.set_state(SpotifyLogin.waiting_for_link)


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞

async def add_acc(message):
    keyboard_add_acc = ReplyKeyboardBuilder()
    button_vk = KeyboardButton(text="VK")
    button_spotify = KeyboardButton(text="Spotify")
    keyboard_add_acc.add(button_vk, button_spotify)
    text_add_acc = ("–í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    await message.answer(text_add_acc, reply_markup=keyboard_add_acc.as_markup(resize_keyboard=True))

async def extra_acc(message):
    text = "–¢—ã —Ö–æ—á–µ—à—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≥–¥–µ-—Ç–æ –µ—â–µ?"
    kb = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç")],
        [KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb)
    await message.answer(text, reply_markup=keyboard)



async def main() -> None:
    bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())